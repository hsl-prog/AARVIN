
AUTONOMOUS ARDUINO-DRIVEN RESEARCH VEHICLE IN NATURE (AARVIN)
AUTHOR: HAYLEY SPENCER LEAVITT 

GITHUB: https://github.com/hsl-prog/AARVIN
JIRA: https://hayleyleavitt.atlassian.net/jira/software/projects/AARVIN/boards


2022/06/07 :  
AARVIN is a personal project I began concepting in the summer of 2021. My primary goal with AARVIN is to learn. I am 
excited by the embedded programming of autonomous vehicles, medical technology, and so many other gadgets. So, what 
better way to learn than to dive right in?

Originally, I intended for AARVIN to be a waterborn vehicle, but due to the limitations of my experience with robotics and 
the hour-long drive to the nearest lake, I decided to change directions. I spent the better part of a year becoming more 
familiar with the concepts behind autonomous robotics, navigation theory, and the techonolgy of Arduino and Raspberry Pi 
before ever beginning the mechanical or software development of AARVIN. 

Finally, I had come up with an achievable goal. While the concept of an autonomous research boat was inspiring, it was 
difficult to determine what I was setting out to achieve with it. What would be AARVIN's purpose? To collect general 
weather data? To search for trash? To locate sunken vessels? All of these concepts are achievable on a grand scale, but 
within the confines of a college student's time and budget, the pursuit of these goals became much more difficult. So, 
what would be more attainable? 

My father, a software engineer at Lockheed Martin, half-jokingly threw out the idea of building a little car that drove 
around and took pictures, much like the Google Street Car, and from there I was hooked. This was an achievable goal, with
a reasonable purpose that helped define all of the design, style, and development questions that I was getting stuck on. 
From there, I was able to quickly sit down and determine exactly what I wanted and needed out of my hardware. 

I decided te use a tank treaded vehicle due to its robust ability to traverse unstable outdoor terrain, and its availability 
as a robotics kit on Amazon. I had specs that I required, but since I did not have access to a laser cutter or a 3D printer, 
my options for chasses were limited. If I'd had more time and access to 3d printers and laser cutters, I certainly would have 
gone the route of designing AARVIN from scratch, but I was able to find a suitable kit on Amazon including a Raspberry Pi: 
https://www.amazon.com/gp/product/B09V7TKJLD/ref=ox_sc_act_title_4?smid=A1N1A77RUX51FT&psc=1

In addition to the Raspberry Pi, I have an Arduino Mega and several other components like ultrasonic sensors, gps modules, 
etc. So far, the hardest part of working on AARVIN was deciding what AARVIN was going to be. 

The assembly of AARVIN will commence upon arrival of the kit in early July. 


2022/10/12 : 
I've made some wonderful advancements with AARVIN! I was able to get the project approved for credit with my university, so 
the bulk of development will be undertaken during this Fall semester of CS469 - Project Management in Computer Science with 
Professor Eric Vogel. 

For materials I have obtained the Sphero RVR, the Advanced Autonomous Kit for Sphero RVR by Sparkfun, an Arduino Due, a 
cheap children's camera, some opto-isolators, and various jumper wires. I'm currently looking into obtaining a better GPS
module, since the one I have at the moment is only accurate to about a 10 foot radius, which is not ideal for the type of 
task I'm aiming to accomplish with my navigation. I'm hoping to have the robot, when complete, take a tour around the road I
live on, since it is a loop in a neighborhood, and take pictures at each house on the loop. Houses are approximately 50 feet 
apart, so a 20 foot diameter of accuracy is good enough, but I'd preferably like to get that to a 6 foot diameter, especially 
if indoor use is desired as well. Currently that's not part of my goal, but it would be a bonus to be able to map out a floor 
of a house, similar to the 3d tours on Zillow. 

Of course, AARVIN is just collecting the photos, but I have thought about continuing the project by creating a software that
would piece together the photos into that 3D map. But probably not. That would be nice for the project, but it is not 
something that I would be interested in learning to do, since I'm more interested in math, physics and lower level programming.

With the start of the semester I am setting up my project plans. Professor Vogel has us using progressive decomposition to create
our task list and then we're using breadth-first continuous integration for implementation. To help with my planning and 
organization, I am making use of Jira and using agile sprints to more helpfully manage my tasks. My goal is to have the hardware 
fully assembled by the end of next week, but debugging and improvements will continue throughout the semester. 

All said and done, AARVIN will be functional by the end of the semester, which is early December. Likely, given the complexity 
of the project, I will continue development beyond the semester. But, it is will be a major accomplishment to have AARVIN working
before I graduate, and I am so excited to learn so much. 


2022/10/28: 
A lot has changed since the last update. It's been 16 days, and I've made good progress! I've ordered parts, broken a
camera, soldered header pins on my own for the first time, and more. It took a decent bit of research to get the RVR working 
with Arduino. It turns out that the RVR's SDK is only compatible with the ATP283Mega control chip Arduinos, which means that my 
Due was not compatible. And I didn't feel that a Nano would have enough power, so that left me with an Uno! I ordered one, and 
luckily it is compatible with all of the sensors in my kit. 

The next issue was a confusing and tough one. I programmed my Uno with Blink and downloaded the SDK, but plugging it into the RVR
resulted in nothing happening. Blink worked, but there was no movement, and I had little idea why. Further research shows that it 
was reflection error. The cord was very long and with reflections corrupting the data, by the time information reached the RVR it 
was all fried. Going from a 6-foot cord to a 6-inch cord fixed the issue though!

The camera I tried to solder some jumper wires to the camera button circuitry, but unfortunately my flux fried some other buttons 
on the camera that were necessary, so that $10 toddler camera is not currently viable. I've ordered an Arducam camera module, but 
I'm not certain that Arduino will have the power to save photos as expected. 

I've begun coding, and for this semester I am prioritizing the autonav features, which includes GPS functionality and obstacle 
detection and avoidance. I'm also looking into adding "whisker" sensors, since I worry about how well the distance sensors are 
going to work at close distances, so some wire and some limit switches will make for a nice bumber sensor. 


2022/11/16: 
Okay, I'm kind of bad at keeping up with this journal. But, I'm making weekly progress report videos for Professor Vogel, so it's 
just not getting translated here. That said, lots of progress. I have the compass, GPS, and distance sensor implemented. The RVR 
drives! 

The Arduino Uno has run out of memory, so I got a little stuck. But, I was able to come up with a solution! Using a BeagleBone 
FTDI Serial Scanner Cable, I am going to watch the Serial while the Uno sends commands to the RVR. That way I can write down the 
ASCII being sent and received, and I can write my own library! Once I have my own library, I will be able to use whatever Arduino 
board I like! So, I'm going to go back to the Due, because it's perfect for this project. I picked it because it had plenty of 
memory, lots of power, it's fast, it's 3.3V, it has 2 Serial ports, and so on. 

I'm excited for the Beaglebone to come in the mail tomorrow. Additionally, I am also purchasing a Black Magic Probe that I plan 
to use as an Arduino debugger! I need to do some more research into how to use it, but it was highly recommended. 

I already found an error in my code. I forgot to account for the offset in starting heading vs RVR directional heading. So, when
the RVR starts up, it initializes whatever heading it is at to 0. When you assume North = 0, and your starting heading is not 
North, that creates a problem. So, I figured out the math and wrote a quick function. The solution is finding the offset, which
is 360 - current heading. Add that offset to the "normal" value of your cardinal direction, and modulo by 360. 

So, if the current heading is 300, then heading offset = 360 - 300 = 60. To go South, which normally is 180, add 60, which equals
240. Thus, south now equals 240 instead of 180. But, if the current heading is 22, then the heading offset is 360 - 22 = 338, and 
to go East, which is normally 90, add 338. East now equals 428. That's over 360, so modulo by 360 or subtract 360 to get 
428 - 360 = 68. So, East now equals 68 instead of 90. 

Once my cable and black magic probe arrive tomorrow I plan to start working on the library recreation! 


2022/11/22:
Hey look, I'm back after only a week! 

Anyway, so, I got obstacle avoidance implemented and I bought a camera module from Sparkfun called the "Mini Spy Camera" which is 
so simple it's basically a blink function. So that camera should work perfectly for my purposes, especially because it has a micro 
sd card reader already on its chip, so the arduino will never have to handle that info. 

The bad news is that I am out of town for Thanksgiving, so I don't have access to all of my tools, like my soldering iron. So that is 
going to slow me down a little in terms of fully implementing the Uno as a slave device to control the RVR and having the Due as 
the main control device. However, I did find a library by rmerriam on BitBucket that he made, reverse engineering Sphero RVR's 
raspberry pi python library to be usable by Microbits and Arduino. I think I'll play around with that while I'm out of town, since 
that may completely eliminate my need to solder a logic level converter for the uno to due, since due is 3.3V and uno is 5v. 

I'll try to keep this updated and let you know how that library pans out, and if there are any tweaks I make to it. I'm also going to
implement the camera, since I can. 
